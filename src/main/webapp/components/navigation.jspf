<nav class="navbar navbar-expand-md navbar-dark bg-dark fixed-top">
    <button class="navbar-toggler" type="button" data-toggle="collapse" data-target="#navbarsExampleDefault"
            aria-controls="navbarsExampleDefault" aria-expanded="false" aria-label="Toggle navigation">
        <span class="navbar-toggler-icon"></span>
    </button>

    <div class="collapse navbar-collapse" id="navbarsExampleDefault">
        <ul class="navbar-nav mr-auto">
            <li class="nav-item">
                <a class="nav-link" href="/Controller?command=Index">Home</a>
            </li>
            <li class="nav-item">
                <a class="nav-link" href="/Controller?command=Profile">Profile</a>
            </li>
            <c:choose>
                <c:when test="${isManager == true}">
                    <li class="nav-item">
                        <a class="nav-link" href="/Controller?command=Management">Management</a>
                    </li>
                </c:when>
            </c:choose>
            <li class="nav-item">
                <a class="nav-link" href="Controller?command=Signout">Log out</a>
            </li>
            <li class="giveStarButton">
                <button type="button" class="open-overlay" id="btn">Give star</button>
            </li>
        </ul>
        <section class="overlay" aria-hidden="true">
            <div>
                <article class="containerGiveStar">
                    <h3>Give Star</h3>

                    <form novalidate="novalidate" action="/Controller?command=Index&isForm=yes" autocomplete="off"
                          method="post">
                        <p>you have ${availableStars} left to give this month</p>
                            <article class="autocomplete">
                                <h2>Choose/Enter Correct Name</h2>
                                <input id="receiverName" type="text" name="receiverName" placeholder="Names">
                            </article>
                            <h2 for="tags">tags</h2>

                            <select id="select" name="tags" id="tags" onchange="addTag()">
                                <option>--Select a tag--</option>
                                <c:forEach var="tag" items="${tags}">
                                    <option class="tagOptions" value="<c:out value="${tag}"></c:out>">
                                        <c:out value="${tag}"></c:out>
                                    </option>
                                </c:forEach>
                            </select>

                            <p id="tagsAdded">
                            <h2>Tags Added: </h2>
                            </p>

                            <input type="hidden" class="Integrity" name="0" id="0">
                            <input type="hidden" class="Curiosity" name="1" id="1">
                            <input type="hidden" class="Collaboration" name="2" id="2">
                            <input type="hidden" class="Client first" name="3" id="3">
                            <input type="hidden" class="Entrepreneurship" name="4" id="4">
                            <input type="hidden" class="Move Faster" name="5" id="5">
                            <input type="hidden" class="Act smarter" name="6" id="6">
                            <input type="hidden" class="Go further" name="7" id="7">
                            <input type="hidden" class="Be sure" name="8" id="8">
                            <input type="hidden" class="Team spirit" name="9" id="9">
                            <input type="hidden" class="Office spirit" name="10" id="10">

                            <label for="description" value="${previous_input_description}">description</label>
                            <textarea name="description" id="description" cols="30" rows="5"
                                      placeholder="enter decription"></textarea>

                            <input type="submit" value="submit" class="close-overlay">
                            <input type="button"  value="close" class="close-overlay" id="close-overlay">
                        </form>
                    <h3>${success}</h3>
                </article>
            </div>
        </section>
        <script>
            var body = document.body,
                overlay = document.querySelector('.overlay'),
                overlayBtts = document.querySelectorAll('button[class$="overlay"]');
            console.log(document.querySelector(".close-overlay"));

            [].forEach.call(overlayBtts, function (btt) {

                btt.addEventListener('click', function () {

                    /* Detect the button class name */
                    var overlayOpen = this.className === 'open-overlay';

                    /* Toggle the aria-hidden state on the overlay and the
                    no-scroll class on the body */
                    overlay.setAttribute('aria-hidden', !overlayOpen);
                    body.classList.toggle('noscroll', overlayOpen);

                    /* On some mobile browser when the overlay was previously
                    opened and scrolled, if you open it again it doesn't
                    reset its scrollTop property */
                    overlay.scrollTop = 0;

                }, false);

            });
        </script>

        <script>
            var body = document.body,
                overlay = document.querySelector('.overlay'),
                overlayBtts = document.querySelectorAll('.close-overlay');

            [].forEach.call(overlayBtts, function (btt) {

                btt.addEventListener('click', function () {

                    /* Detect the button class name */
                    var overlayOpen = this.className === 'open-overlay';

                    /* Toggle the aria-hidden state on the overlay and the
                    no-scroll class on the body */
                    overlay.setAttribute('aria-hidden', !overlayOpen);
                    body.classList.toggle('noscroll', overlayOpen);

                    /* On some mobile browser when the overlay was previously
                    opened and scrolled, if you open it again it doesn't
                    reset its scrollTop property */
                    overlay.scrollTop = 0;

                }, false);

            });
        </script>

        <script>
            window.addEventListener("load", initPage, false);

            var counterList;

            function initPage() {
                counterList = 0;
            }

            function addTag() {

                if (counterList > 3) {

                } else {
                    var currentSelection = document.getElementById("select").value

                    var button = document.createElement("button");
                    button.innerHTML = currentSelection + "(Click to remove)"
                    button.id = currentSelection;

                    var hiddenTags = document.getElementsByClassName(currentSelection);
                    hiddenTags[0].value = currentSelection;

                    button.addEventListener("click", function () {
                        document.getElementById("tagsAdded").removeChild(button);
                        var buttonIdToRemove = button.id;
                        var hiddenTagToRemove = document.getElementsByClassName(buttonIdToRemove);
                        hiddenTagToRemove[0].value = "";

                        counterList--;
                    }, false);

                    counterList++;
                    document.getElementById("tagsAdded").appendChild(button)
                }
            }

            function autocomplete(inp, arr) {
                /*the autocomplete function takes two arguments,
                the text field element and an array of possible autocompleted values:*/
                var currentFocus;
                /*execute a function when someone writes in the text field:*/
                inp.addEventListener("input", function (e) {
                    var a, b, i, val = this.value;
                    /*close any already open lists of autocompleted values*/
                    closeAllLists();
                    if (!val) {
                        return false;
                    }
                    currentFocus = -1;
                    /*create a DIV element that will contain the items (values):*/
                    a = document.createElement("SPAN");
                    a.setAttribute("id", this.id + "autocomplete-list");
                    a.setAttribute("class", "autocomplete-items");
                    /*append the DIV element as a child of the autocomplete container:*/
                    this.parentNode.appendChild(a);
                    /*for each item in the array...*/
                    for (i = 0; i < arr.length; i++) {
                        /*check if the item starts with the same letters as the text field value:*/
                        if (arr[i].substr(0, val.length).toUpperCase() == val.toUpperCase()) {
                            /*create a DIV element for each matching element:*/
                            b = document.createElement("SPAN");
                            /*make the matching letters bold:*/
                            b.innerHTML = "<strong>" + arr[i].substr(0, val.length) + "</strong>";
                            b.innerHTML += arr[i].substr(val.length);
                            /*insert a input field that will hold the current array item's value:*/
                            b.innerHTML += "<input type='hidden' value='" + arr[i] + "'>";
                            /*execute a function when someone clicks on the item value (DIV element):*/
                            b.addEventListener("click", function (e) {
                                /*insert the value for the autocomplete text field:*/
                                inp.value = this.getElementsByTagName("input")[0].value;
                                /*close the list of autocompleted values,
                                (or any other open lists of autocompleted values:*/
                                closeAllLists();
                            });
                            a.appendChild(b);
                        }
                    }
                });
                /*execute a function presses a key on the keyboard:*/
                inp.addEventListener("keydown", function (e) {
                    var x = document.getElementById(this.id + "autocomplete-list");
                    if (x) x = x.getElementsByTagName("span");
                    if (e.keyCode == 40) {
                        /*If the arrow DOWN key is pressed,
                        increase the currentFocus variable:*/
                        currentFocus++;
                        /*and and make the current item more visible:*/
                        addActive(x);
                    } else if (e.keyCode == 38) { //up
                        /*If the arrow UP key is pressed,
                        decrease the currentFocus variable:*/
                        currentFocus--;
                        /*and and make the current item more visible:*/
                        addActive(x);
                    } else if (e.keyCode == 13) {
                        /*If the ENTER key is pressed, prevent the form from being submitted,*/
                        e.preventDefault();
                        if (currentFocus > -1) {
                            /*and simulate a click on the "active" item:*/
                            if (x) x[currentFocus].click();
                        }
                    }
                });

                function addActive(x) {
                    /*a function to classify an item as "active":*/
                    if (!x) return false;
                    /*start by removing the "active" class on all items:*/
                    removeActive(x);
                    if (currentFocus >= x.length) currentFocus = 0;
                    if (currentFocus < 0) currentFocus = (x.length - 1);
                    /*add class "autocomplete-active":*/
                    x[currentFocus].classList.add("autocomplete-active");
                }

                function removeActive(x) {
                    /*a function to remove the "active" class from all autocomplete items:*/
                    for (var i = 0; i < x.length; i++) {
                        x[i].classList.remove("autocomplete-active");
                    }
                }

                function closeAllLists(elmnt) {
                    /*close all autocomplete lists in the document,
                    except the one passed as an argument:*/
                    var x = document.getElementsByClassName("autocomplete-items");
                    for (var i = 0; i < x.length; i++) {
                        if (elmnt != x[i] && elmnt != inp) {
                            x[i].parentNode.removeChild(x[i]);
                        }
                    }
                }

                /*execute a function when someone clicks in the document:*/
                document.addEventListener("click", function (e) {
                    closeAllLists(e.target);
                });
            }

            /*An array containing all the country names in the world:*/
            var names = [];
            names = ${listName};

            /*initiate the autocomplete function on the "myInput" element, and pass along the countries array as possible autocomplete values:*/
            autocomplete(document.getElementById("receiverName"), names);
            if (window.location.href.includes("Index") || window.location.href.includes("Verification")) {
                autocomplete(document.getElementById("receiverNameFilter"), names);
            }

        </script>
        <!--<form class="form-inline my-2 my-lg-0">
            <input class="form-control mr-sm-2" type="text" placeholder="Search" aria-label="Search">
            <button class="btn btn-outline-success my-2 my-sm-0" type="submit">Search</button>
        </form>-->
    </div>
</nav>
